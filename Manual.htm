<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Manual</title><meta name="author" content="Max"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 .s1 { color: #404040; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 36pt; }
 .s2 { color: #585858; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 .s3 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 18pt; }
 p { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; margin:0pt; }
 .a, a { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s4 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s6 { color: black; font-family:Calibri, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s7 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 .s8 { color: #FFF; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s9 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s10 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s11 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 li {display: block; }
 #l1 {padding-left: 0pt;counter-reset: c1 1; }
 #l1> li>*:first-child:before {counter-increment: c1; content: counter(c1, decimal)". "; color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l1> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 li {display: block; }
 #l2 {padding-left: 0pt; }
 #l2> li>*:first-child:before {content: "● "; color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 li {display: block; }
 #l3 {padding-left: 0pt;counter-reset: e1 1; }
 #l3> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)". "; color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 li {display: block; }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 li {display: block; }
 #l5 {padding-left: 0pt;counter-reset: g1 1; }
 #l5> li>*:first-child:before {counter-increment: g1; content: "["counter(g1, decimal)"] "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "- "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 li {display: block; }
 #l7 {padding-left: 0pt;counter-reset: h1 7; }
 #l7> li>*:first-child:before {counter-increment: h1; content: "["counter(h1, decimal)"] "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 7pt;text-indent: 0pt;line-height: 42pt;text-align: left;">ALIBRE SCRIPT</p><p class="s2" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Manual Version 1.5</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 192pt;text-indent: 0pt;text-align: left;"><span><img width="128" height="44" alt="image" src="Manual_files/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark0">DISCLAIMER</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Information in this document is subject to change without notice and does not represent a commitment on the part of the manufacturer. The software described in this document is furnished under license agreement or nondisclosure agreement and may be used or copied in accordance with the terms of the agreement. It is against the law to copy the software on any medium except as specifically allowed in the license or nondisclosure agreement. No part of this manual may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or information storage and retrieval systems, for any purpose other than the software purchaser’s use, without prior written permission.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">© Alibre, LLC 2018-2019, All Rights Reserved</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 167%;text-align: left;">Microsoft® and Windows™ are trademarks or registered trademarks of Microsoft Corporation. PC® is a registered trademark of International Business Machines Corporation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark1">TABLE OF CONTENTS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">CONTENTS</p><p style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark0" class="a">Disclaimer                                                     </a><a href="#bookmark0">2</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="a">Table of Contents                                                 </a><a href="#bookmark1">3</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark2" class="a">Chapter 1: Introduction                                             </a><a href="#bookmark2">5</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="a">Chapter 2: Quick Start                                              </a><a href="#bookmark3">6</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="a">Chapter 3: Units                                                 </a><a href="#bookmark4">15</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="a">Chapter 4: Polylines                                               </a><a href="#bookmark5">16</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="a">Creation                                                    </a><a href="#bookmark6">17</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="a">Intersection of Two Polylines                                        </a><a href="#bookmark7">18</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="a">Rotation                                                    </a><a href="#bookmark8">18</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="a">Joining                                                     </a><a href="#bookmark9">18</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="a">Translation                                                  </a><a href="#bookmark10">18</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="a">Copying                                                    </a><a href="#bookmark11">18</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="a">Chapter 5: Sketch Manipulation                                        </a><a href="#bookmark12">20</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="a">Copying                                                    </a><a href="#bookmark13">20</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark14" class="a">Rotation                                                    </a><a href="#bookmark14">21</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark15" class="a">Translation                                                  </a><a href="#bookmark15">21</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark16" class="a">Scaling                                                     </a><a href="#bookmark16">22</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark17" class="a">Combination                                                 </a><a href="#bookmark17">22</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark18" class="a">Chapter 6: Involute Gears                                           </a><a href="#bookmark18">24</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark19" class="a">Theory                                                     </a><a href="#bookmark19">24</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark20" class="a">Creating Gears                                                </a><a href="#bookmark20">24</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark21" class="a">Advanced Functionality                                           </a><a href="#bookmark21">27</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark22" class="a">Chapter 7: Modifying Existing Parts &amp; Sketches                               </a><a href="#bookmark22">32</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark23" class="a">Chapter 8: Hints &amp; Tips                                             </a><a href="#bookmark23">34</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark24" class="a">Chapter 9: Running Scripts – Advanced                                    </a><a href="#bookmark24">35</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark25" class="a">Chapter 10: Built-In Functionality                                       </a><a href="#bookmark25">36</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark26" class="a">Details of the Current Script                                         </a><a href="#bookmark26">36</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark27" class="a">Current Part or Assembly                                          </a><a href="#bookmark27">36</a></p><p style="padding-top: 10pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark28" class="a">Currently Opened Parts and Assemblies                                  </a><a href="#bookmark28">36</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark29" class="a">The Alibre Script Version                                           </a><a href="#bookmark29">36</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark30" class="a">Graphical User Interface                                           </a><a href="#bookmark30">37</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark31" class="a">Getting User Input                                              </a><a href="#bookmark31">37</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark32" class="a">Utility Libraries                                                </a><a href="#bookmark32">37</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark33" class="a">Chapter 11: 2D Sketch Mapping                                        </a><a href="#bookmark33">38</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark34" class="a">Face Mapping                                                 </a><a href="#bookmark34">38</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark35" class="a">Generic Mapping                                               </a><a href="#bookmark35">41</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark36" class="a">Chapter 12: Editor                                                </a><a href="#bookmark36">45</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark37" class="a">Undo And Redo                                                </a><a href="#bookmark37">45</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark38" class="a">Select, Copy and Paste                                            </a><a href="#bookmark38">45</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark39" class="a">Find and Replace                                               </a><a href="#bookmark39">45</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark40" class="a">Quick Find                                                   </a><a href="#bookmark40">48</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark41" class="a">Go To                                                     </a><a href="#bookmark41">48</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark42" class="a">Run the Script                                                 </a><a href="#bookmark42">49</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark43" class="a">Save                                                      </a><a href="#bookmark43">49</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark44" class="a">Code Folding                                                 </a><a href="#bookmark44">49</a></p><p class="s3" style="padding-top: 10pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark2">CHAPTER 1: INTRODUCTION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Alibre Script brings scripting to Alibre Design. Scripting provides a powerful means to create sketches and parts based on variables, repetition and algorithms. For example a single script could create a set of 50 parts that are all similar but have slight variations. Creating each part by hand would be tedious and time consuming. Scripts are good at generating precise mathematical shapes, for example the involute curve on the side of a gear tooth.</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Alibre Script uses the Python language, which is widely supported and is ideal for rapid script development by non-programmers. Python comes with a large library of functionality that is ready to use out-of-the-box.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="155" alt="image" src="Manual_files/Image_002.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Units.Current = UnitTypes.Millimeters Test = Part(&quot;Test&quot;)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">XYPlane = Test.GetPlane(&quot;XY-Plane&quot;)</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">MySketch = Test.AddSketch(&quot;MySketch&quot;, XYPlane) MySketch.AddCircle(0, 0, 10, False)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Cylinder = Test.AddExtrudeBoss(&quot;Object&quot;, MySketch, 5, False)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Here is a simple example script:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">This script creates a new part called “Test” that contains a cylinder which is 10mm in diameter and 5mm in depth.</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;"><a href="http://www.python.org/" class="a" target="_blank">Familiarity with Alibre Design is required. Familiarity with Python is also required. More details about Python can be found from </a><span style=" color: #00F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 11pt;">http://www.python.org/</span>. We recommend “Python Essential Reference” published by Addison Wesley.</p><p class="s6" style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">For a complete list of all functionality provided by Alibre Script please see the separate reference manual.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark3">CHAPTER 2: QUICK START</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l1"><li data-list-text="1."><p style="padding-left: 25pt;text-indent: -18pt;text-align: left;">Start Alibre Design and open the Alibre Script tab. Click ‘Launch’ to open the Alibre Script window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="630" height="122" alt="image" src="Manual_files/Image_003.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">The Alibre Script window looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="624" height="404" alt="image" src="Manual_files/Image_004.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Across the top is the toolbar providing access to file, editing and execution features. The main part of the window has two tabs, New Script (1) and Console.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">The script tab allows editing of the current script. The console tab provides immediately access to the Python environment.</p></li><li data-list-text="2."><p style="padding-top: 8pt;padding-left: 25pt;text-indent: -18pt;text-align: left;">Click on the Console tab to view the scripting console.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;"><span><img width="379" height="206" alt="image" src="Manual_files/Image_005.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_006.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyPart = Part(‘My Part’)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="3."><p style="padding-left: 25pt;text-indent: -18pt;text-align: left;">Click on the script tab and type in:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="4."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;text-align: left;">Press Enter. Alibre Design will spring into action and create a new part ready for editing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="621" height="107" alt="image" src="Manual_files/Image_007.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Notice that the name of the part is “My Part” which is the name you entered at the prompt.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_008.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">XYPlane = MyPart.GetPlane(&#39;XY-Plane&#39;)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="5."><p style="padding-top: 9pt;padding-left: 25pt;text-indent: -18pt;line-height: 108%;text-align: left;">In order to create a sketch we need a plane to create it on. Enter the following in the script window to get access to the X-Y plane:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Any design plane can be accessed this way by providing the name of the plane shown in the design explorer in Alibre Design.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_009.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">HeadSketch = MyPart.AddSketch(&#39;Head&#39;, XYPlane)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="6."><p style="padding-top: 8pt;padding-left: 25pt;text-indent: -18pt;text-align: left;">Create a new sketch on the XY plane by entering:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">The sketch created can be seen in the design explorer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 201pt;text-indent: 0pt;text-align: left;"><span><img width="105" height="107" alt="image" src="Manual_files/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_011.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">HeadSketch.AddCircle(0, 0, 10, False)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="7."><p style="padding-left: 25pt;text-indent: -18pt;text-align: left;">Now we will create a circle in the sketch centered on the origin. We can do this by entering:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">This command adds a circle to the HeadSketch 10mm in diameter centered at (0,0). The final parameter is set to False. If we set it to True instead, then it would create a reference circle.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;"><span><img width="269" height="260" alt="image" src="Manual_files/Image_012.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_013.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">BoltHead = MyPart.AddExtrudeBoss(&#39;Bolt Head&#39;, HeadSketch, 5, False)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="8."><p style="padding-left: 25pt;text-indent: -18pt;text-align: left;">Now we have a sketch we can extrude. Enter the following line in the script window:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">This extrudes the sketch HeadSketch by 5mm. The final parameter is set to False. If we set it to True instead, then the extrusion direction would be reversed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="622" height="319" alt="image" src="Manual_files/Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_015.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">HeadBottomPlane = MyPart.AddPlane(&#39;Head Bottom&#39;, XYPlane, 5)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="9."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;line-height: 108%;text-align: left;">We will now create a reference plane 5mm from the XY plane.Enter the following line in the script window:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 160pt;text-indent: 0pt;text-align: left;"><span><img width="217" height="175" alt="image" src="Manual_files/Image_016.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_017.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">ShoulderSketch = MyPart.AddSketch(&#39;Shoulder&#39;, HeadBottomPlane)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="10."><p style="padding-left: 25pt;text-indent: -18pt;text-align: left;">Now that we have a reference plane we can create a new sketch on it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 194pt;text-indent: 0pt;text-align: left;"><span><img width="117" height="124" alt="image" src="Manual_files/Image_018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_019.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">ShoulderSketch.AddCircle(0, 0, 5, False)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="11."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;text-align: left;">Draw a circle on the sketch 5mm in diameter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><span><img width="304" height="299" alt="image" src="Manual_files/Image_020.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="37" alt="image" src="Manual_files/Image_021.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 108%;text-align: left;">BoltShoulder = MyPart.AddExtrudeBoss(&#39;Bolt Shoulder&#39;, ShoulderSketch, 20, False)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="12."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;text-align: left;">Now extrude the sketch 20mm to create the shoulder of the bolt.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="617" height="317" alt="image" src="Manual_files/Image_022.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_023.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">HexSketch = MyPart.AddSketch(&#39;Hex&#39;, XYPlane)</p><p class="s4" style="padding-top: 9pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">HexSketch.AddPolygon(0, 0, 5, 6, False)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="13."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;line-height: 108%;text-align: left;">Now we will create the allen key recess in the head of the bolt. We start by adding a new sketch to the XY plane that contains a hexagon 5mm in diameter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="460" height="299" alt="image" src="Manual_files/Image_024.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_025.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">HexRecess = MyPart.AddExtrudeCut(&#39;Hex Recess&#39;, HexSketch, 3, False)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="14."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;text-align: left;">Add an extrude cut to create the recess in the head of the bolt.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="612" height="273" alt="image" src="Manual_files/Image_026.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="74" alt="image" src="Manual_files/Image_027.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">MyPart.Save(&quot;C:\Users\Andy\Desktop&quot;) MyPart.ExportSTL(&quot;C:\Users\Andy\Desktop\My Part.stl&quot;)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">MyPart.Close()</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="15."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;line-height: 108%;text-align: left;">Finally we can save our new part, export it as an STL and then close the window. Replace the following paths with your own.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="236" alt="image" src="Manual_files/Image_028.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyPart = Part(“My Part”)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">XYPlane = MyPart.GetPlane(&quot;XY-Plane&quot;) HeadSketch = MyPart.AddSketch(&quot;Head&quot;, XYPlane) HeadSketch.AddCircle(0, 0, 10, False)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BoltHead = MyPart.AddExtrudeBoss(&quot;Bolt Head&quot;, HeadSketch, 5, False)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;line-height: 20pt;text-align: left;">HeadBottomPlane = MyPart.AddPlane(“Head Bottom”, XYPlane, 5) ShoulderSketch = MyPart.AddSketch(“Shoulder”, HeadBottomPlane)</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="16."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;text-align: left;">Here is the entire script:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="628" height="302" alt="image" src="Manual_files/Image_029.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="280" alt="image" src="Manual_files/Image_030.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">ShoulderSketch.AddCircle(0, 0, 5, False)</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 107%;text-align: left;">BoltShoulder = MyPart.AddExtrudeBoss(“Bolt Shoulder”, ShoulderSketch, 20, False)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">HexSketch = MyPart.AddSketch(“Hex”, XYPlane) HexSketch.AddPolygon(0, 0, 5, 6, False)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">HexRecess = MyPart.AddExtrudeCut(“Hex Recess”, HexSketch, 3, False)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">MyPart.Save(“C:\Users\Andy\Desktop”) MyPart.ExportSTL(“C:\Users\Andy\Desktop\My Part.stl”)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">MyPart.Close()</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="17."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;line-height: 108%;text-align: left;">Save the script and then run it by clicking on the Run Script button. The part will be created, saved, exported and closed in one step.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="624" height="141" alt="image" src="Manual_files/Image_031.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark4">CHAPTER 3: UNITS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The units used in scripts are separate from the units used in Alibre Design. For example Alibre Design can be configured for inches but a script uses millimeters, or vice versa.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="74" alt="image" src="Manual_files/Image_032.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Units.Current = UnitTypes.Millimeters Units.Current = UnitTypes.Centimeters</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Units.Current = UnitTypes.Inches</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">The units used in a script can be set by adding one of the following lines to the start of the script:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="101" alt="image" src="Manual_files/Image_033.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Units.Current = UnitTypes.Millimeters HeadSketch.AddCircle(0, 0, 10.2, False) Units.Current = UnitTypes.Inches</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">HeadSketch.AddCircle(3, 2.6, 4.1, False)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">At any point in a script the units used can be changed. All values after the change will be in the new units. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 109%;text-align: left;">This draws two circles on a sketch. The first is located at 0, 0 and is 10.2mm in diameter. The second is located at 3”, 2.6” and is 4.1” in diameter.</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Angles are always given in degrees.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark5">CHAPTER 4: POLYLINES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">A line consists of a start point and an endpoint. Typically sketches consist of a number of lines connected together. Here is an example of a sketch that consists of eight lines.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 124pt;text-indent: 0pt;text-align: left;"><span><img width="311" height="299" alt="image" src="Manual_files/Image_034.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Alibre Script introduces the concept of polylines. A polyline is a set of lines chained together. For example the above sketch can be represented by a single polyline. Here is another polyline:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 152pt;text-indent: 0pt;text-align: left;"><span><img width="234" height="231" alt="image" src="Manual_files/Image_035.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">A polyline is defined by the set of points listed from one end to the other. For a polygon the first and last points are at the same location. Here is an example of a polyline defined by points followed by how it looks on the screen:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Point 1 = 0, 0</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Point 2 = 0, 10</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Point 3 = 10, 10</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Point 4 = 10, 5</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 138pt;text-indent: 0pt;text-align: left;"><span><img width="274" height="228" alt="image" src="Manual_files/Image_036.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark6">CREATION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="128" alt="image" src="Manual_files/Image_037.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">MyLine = Polyline() MyLine.AddPoint(PolylinePoint(0, 0))</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">MyLine.AddPoint(PolylinePoint(0, 10))</p><p class="s4" style="padding-top: 9pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyLine.AddPoint(PolylinePoint(10, 10))</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyLine.AddPoint(PolylinePoint(10, 5))</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Creating polyline in Alibre Script is easy. Here is an example that creates the above polyline:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_038.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MySketch.AddPolyline(MyLine, False)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Once created the polyline can be added to a sketch:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Polylines have some useful properties that help with creating sketches based on mathematics and algorithms. For example the intersection of two polylines can be found. A polyline can be trimmed at a point. Polylines can be rotated, translated, merged and duplicated. Points can be inserted into anywhere along a polyline.</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The key point to remember is that polylines can be manipulated multiple times before committing to a sketch.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark7">INTERSECTION OF TWO POLYLINES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_039.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Intersection = Polyline.FindIntersection(MyLine, MyOtherLine)</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">TrimmedLine = MyLine.SplitAtPoint(Intersection, 0.001)[0]</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Here is an example of finding the intersection of two polylines and then trimming the first polyline up to that point:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark8">ROTATION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_040.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyLine.RotateZ(4, 7, 15.3)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">To rotate a line around location 4, 7 by 15.3 degrees:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark9">JOINING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_041.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">LongPolyline = MyLine.Append(MyOtherLine)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Joining two polylines together makes a new polyline:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark10">TRANSLATION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_042.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyLine.Offset(4.7, -8.9)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Translating a line is simple. For example to move it 4.7mm in the X direction and -8.9mm in the Y direction:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark11">COPYING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_043.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewLine = MyLine.Clone()</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">A line can be duplicated:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Now NewLine can be manipulated without changing the original MyLine it was based on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark12">CHAPTER 5: SKETCH MANIPULATION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Alibre Script contains functionality for manipulating sketches such as copying, scaling, rotation and translation. This opens possibilities for reuse of sketches in novel ways.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_044.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">CopyFrom(Sketch SketchtoCopy)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">The manipulation function is provided by the function CopyFrom. Here is how the function is defined:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="53" alt="image" src="Manual_files/Image_045.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 109%;text-align: left;">CopyFrom(Sketch SketchtoCopy, double Angle, double RotationCenterX, double RotationCenterY, double TranslateX, double TranslateY, double ScaleOriginX, double ScaleOriginY, double ScaleFactor)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">and:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Angle is a rotation angle in degrees. Positive values result in clockwise rotation. Rotation can be around any point defined by RotationCenterX and RotationCenterY.</p><p style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">TranslateX and TranslateY allow the sketch to the moved.</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">A scale factor of 50.0 reduces the size of the sketch by 50% and a scale factor of 150.0 increases it by 50%. Scaling is based on a point defined by ScaleOriginY and ScaleOriginN.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark13">COPYING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_046.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch = MyPart.AddSketch(&quot;New&quot;, MyPart.GetPlane(&quot;YZ-Plane&quot;))</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch.CopyFrom(OtherSketch)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Creating a copy of a sketch for a different plane:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 171pt;text-indent: 0pt;text-align: left;"><span><img width="182" height="218" alt="image" src="Manual_files/Image_047.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark14">ROTATION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_048.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch = MyPart.AddSketch(&quot;New&quot;, MyPart.GetPlane(&quot;XY-Plane&quot;))</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch.CopyFrom(OtherSketch, 30, 0, 0, 0, 0, 0, 0, 100.0)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Creating a copy of a sketch that is rotated 30 degrees clockwise around the origin:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 127pt;text-indent: 0pt;text-align: left;"><span><img width="301" height="320" alt="image" src="Manual_files/Image_049.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark15">TRANSLATION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_050.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch = MyPart.AddSketch(&quot;New&quot;, MyPart.GetPlane(&quot;XY-Plane&quot;))</p><p class="s4" style="padding-top: 9pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch.CopyFrom(OtherSketch, 0, 0, 0, 3.7, -6.1, 0, 0, 100.0)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Creating a copy of a sketch that is offset by 3.7 in the X direction and -6.1 in the Y direction:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 189pt;text-indent: 0pt;text-align: left;"><span><img width="138" height="211" alt="image" src="Manual_files/Image_051.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 10pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark16">SCALING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_052.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch = MyPart.AddSketch(&quot;New&quot;, MyPart.GetPlane(“XY-Plane”))</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch.CopyFrom(OtherSketch, 0, 0, 0, 0, 0, 0, 0, 125.0)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Creating a copy of a sketch that is increased in size by 25%, scaling from the origin:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 157pt;text-indent: 0pt;text-align: left;"><span><img width="224" height="324" alt="image" src="Manual_files/Image_053.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark17">COMBINATION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_054.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch = MyPart.AddSketch(&quot;New&quot;, MyPart.GetPlane(&quot;XY-Plane&quot;))</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch.CopyFrom(OtherSketch, 30, 0, 0, 3.7, -6.1, 0, 0, 125.0)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Creating a copy of a sketch that is rotated, offset and scaled:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 188pt;text-indent: 0pt;text-align: left;"><span><img width="140" height="208" alt="image" src="Manual_files/Image_055.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark18">CHAPTER 6: INVOLUTE GEARS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Alibre Script provides basic functionality for creating involute gears, which are gears with involute curves on the edges of the teeth. An involute curve ensures constant force and direction of force throughout the meshing of two teeth, which results in smooth and efficient operation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark19">THEORY</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: center;">Gears are defined by three related parameters:</p><ul id="l2"><li data-list-text="●"><p style="padding-top: 9pt;padding-left: 43pt;text-indent: -18pt;text-align: left;">Diametral pitch or Module (tooth size) (D)</p></li><li data-list-text="●"><p style="padding-top: 1pt;padding-left: 43pt;text-indent: -18pt;text-align: left;">Pitch diameter (gear size) (P)</p></li><li data-list-text="●"><p style="padding-top: 1pt;padding-left: 43pt;text-indent: -18pt;text-align: left;">Number of teeth (N)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Diametral pitch is used in Imperial/English measurement systems (teeth per inch of pitch diameter) and Module is used in metric measurement systems (mm per tooth of pitch diameter). Alibre Script supports diametral pitch however the module value can easily be converted:</p><p style="padding-top: 8pt;padding-left: 6pt;text-indent: 0pt;text-align: center;">Diametral Pitch = 25.4 / Module</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">All units in a script are configurable – see chapter 3 – with the exception of diametral pitch. This value is always given in teeth per inch.</p><p style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">The relationship between the three parameters is:</p><p style="padding-top: 9pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">Number of teeth = Pitch diameter (in inches) x Diametral Pitch</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">A fourth parameter is also needed, called the pressure angle. This is the angle that the force from one gear is exerted on the other gear. Typical values are 20 degrees and 25 degrees.</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">In order for two gears (A and B) to mesh properly the following must be true:</p></li><li data-list-text="●"><p style="padding-top: 9pt;padding-left: 43pt;text-indent: -18pt;text-align: left;">Diametral pitch A = Diametral pitch B</p></li><li data-list-text="●"><p style="padding-top: 1pt;padding-left: 43pt;text-indent: -18pt;text-align: left;">Pressure angle A = Pressure Angle B</p></li><li data-list-text="●"><p style="padding-top: 1pt;padding-left: 43pt;text-indent: -18pt;text-align: left;">Distance between gear centers = (Pitch diameter A + Pitch diameter B) / 2</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark20">CREATING GEARS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Alibre Script treats a gear profile as a specialized type of sketch. Creating a gear is therefore like creating a sketch with the profile already generated and added. Here is an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="37" alt="image" src="Manual_files/Image_056.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 108%;text-align: left;">GearSketch = MyPart.AddGearNP(&quot;MyGear&quot;, 30, 38, 20, 0, 0, MyPart.GetPlane(&quot;XY-Plane&quot;))</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">This creates a gear profile that is 38mm in diameter and has 30 teeth, with a pressure angle of 20 degrees and is centered on the origin.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 129pt;text-indent: 0pt;text-align: left;"><span><img width="300" height="296" alt="image" src="Manual_files/Image_057.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_058.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">D = GearSketch.DiametralPitch</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print &quot;Diametral Pitch = %f&quot; % D</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">We used two of the three parameters to define the gear – number of teeth (N) and pitch diameter (P). The third parameter can be read out from the gear sketch:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Alibre Script defines a total of four functions for creating gears:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:7.52399pt" cellspacing="0"><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-left-style:solid;border-left-width:1pt;border-left-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD" bgcolor="#4F81BC"><p class="s8" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Function</p></td><td style="width:174pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD" bgcolor="#4F81BC"><p class="s8" style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Parameters</p></td><td style="width:182pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD;border-right-style:solid;border-right-width:1pt;border-right-color:#7A9FCD" bgcolor="#4F81BC"><p class="s8" style="padding-left: 32pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Calculates For You</p></td></tr><tr style="height:43pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-left-style:solid;border-left-width:1pt;border-left-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD" bgcolor="#D2DFED"><p class="s9" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">AddGearNP</p></td><td style="width:174pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD" bgcolor="#D2DFED"><p class="s10" style="padding-left: 51pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Number of teeth (N)</p><p class="s10" style="padding-top: 7pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Pitch diameter (P)</p></td><td style="width:182pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD;border-right-style:solid;border-right-width:1pt;border-right-color:#7A9FCD" bgcolor="#D2DFED"><p class="s10" style="padding-left: 32pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Diametral Pitch (D)</p></td></tr><tr style="height:43pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-left-style:solid;border-left-width:1pt;border-left-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD"><p class="s9" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">AddGearDP</p></td><td style="width:174pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD"><p class="s10" style="padding-left: 51pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Diametral pitch (D)</p><p class="s10" style="padding-top: 8pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Pitch diameter (P)</p></td><td style="width:182pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD;border-right-style:solid;border-right-width:1pt;border-right-color:#7A9FCD"><p class="s10" style="padding-left: 32pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Number of teeth (N)</p></td></tr><tr style="height:43pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-left-style:solid;border-left-width:1pt;border-left-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD" bgcolor="#D2DFED"><p class="s9" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">AddGearDN</p></td><td style="width:174pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD" bgcolor="#D2DFED"><p class="s10" style="padding-left: 51pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Diametral pitch (D)</p><p class="s10" style="padding-top: 7pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Number of teeth (N)</p></td><td style="width:182pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD;border-right-style:solid;border-right-width:1pt;border-right-color:#7A9FCD" bgcolor="#D2DFED"><p class="s10" style="padding-left: 32pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Pitch diameter (P)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:7.52399pt" cellspacing="0"><tr style="height:65pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-left-style:solid;border-left-width:1pt;border-left-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD"><p class="s9" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">AddGear</p></td><td style="width:181pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD"><p class="s10" style="padding-left: 58pt;padding-right: 12pt;text-indent: 0pt;line-height: 159%;text-align: left;">Number of teeth (N) Pitch diameter (P)</p><p class="s10" style="padding-left: 58pt;text-indent: 0pt;text-align: left;">Diametral pitch (D)</p></td><td style="width:182pt;border-top-style:solid;border-top-width:1pt;border-top-color:#7A9FCD;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#7A9FCD;border-right-style:solid;border-right-width:1pt;border-right-color:#7A9FCD"><p class="s10" style="padding-left: 32pt;text-indent: 0pt;line-height: 13pt;text-align: left;">None</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_059.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">GearSketch.AddCircle(0, 0, 32, False)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Once the gear sketch has been created it can be treated just like any other sketch, for example adding circles:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: left;"><span><img width="306" height="309" alt="image" src="Manual_files/Image_060.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 156pt;text-indent: 0pt;text-align: left;"><span><img width="228" height="262" alt="image" src="Manual_files/Image_061.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark21">ADVANCED FUNCTIONALITY</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Sometimes it may be necessary to modify the shape of a tooth because of project requirements. For example Alibre Script does not add undercutting. To help with this it is possible to generate a single tooth which can be modified and then used in a circular pattern. Here is how it is done.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="37" alt="image" src="Manual_files/Image_062.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 108%;text-align: left;">GearSketch = MyPart.AddGear(&quot;MyGear&quot;, 30, 30, 25.4, 20, True, 0, 0, MyPart.GetPlane(&quot;XY-Plane&quot;))</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">We start by using the AddGear function to generate a single tooth with the center of the gear on the origin. In this example the pitch diameter is 25.4mm and the number of teeth is 20, with a pressure angle of 20 degrees:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 128pt;text-indent: 0pt;text-align: left;"><span><img width="299" height="252" alt="image" src="Manual_files/Image_063.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Now switch to using Alibre Design directly. Edit the sketch and connect the end points to the origin with straight lines:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;text-align: left;"><span><img width="219" height="187" alt="image" src="Manual_files/Image_064.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Edit the sketch to add the desired undercut:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 99pt;text-indent: 0pt;text-align: left;"><span><img width="378" height="260" alt="image" src="Manual_files/Image_065.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Extrude the sketch to the desired gear thickness:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 138pt;text-indent: 0pt;text-align: left;"><span><img width="276" height="345" alt="image" src="Manual_files/Image_066.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Create a circular feature pattern around the Z axis. We know that there are 30 teeth in this gear so we need to create 30 copies.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;"><span><img width="475" height="361" alt="image" src="Manual_files/Image_067.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">The completed gear:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 164pt;text-indent: 0pt;text-align: left;"><span><img width="205" height="262" alt="image" src="Manual_files/Image_068.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">A close up of the customized teeth:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="483" height="267" alt="image" src="Manual_files/Image_069.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark22">CHAPTER 7: MODIFYING EXISTING PARTS &amp; SKETCHES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 109%;text-align: left;">Sometimes it can be useful to use a script to modify a part or sketch that has been already created. For example a script could be written to perform a repetitive task that is not available in the Alibre Design user interface.</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">To obtain access to an existing part open the part in Alibre Design and then:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_070.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyPart = Part(&quot;New Part (1)&quot;, False)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Insert the name of the part as shown in the design explorer. The second parameter is set to False, which tells Alibre Script to use a part that has already been created or opened.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_071.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MySketch = Part.GetSketch(&quot;Sketch&lt;1&gt;&quot;)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 183%;text-align: left;">The part can now be accessed as normal by the rest of the script. To access a sketch on the part:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 109%;text-align: left;">Insert the name of the sketch as shown in the design explorer. The sketch can now be modified by the rest of the script.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_072.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print len(MySketch.Figures)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;line-height: 109%;text-align: left;">The lines, circles, arcs, etc. defined on a sketch are called “figures”. The figures are available as a list in Python. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">will print out the total number of figures on the sketch. We can view the details of a specific figure:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_073.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print MySketch.Figures[0]</p><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-top: 8pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">Circle centered at 7.5,-35 with radius 1.75</p><p style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">We can get access to that figure and use it in other sketches and other parts:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="101" alt="image" src="Manual_files/Image_074.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Fig = MySketch.Figures[0] NewPart = Part(&quot;New&quot;)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch = NewPart.AddSketch(&quot;Sketch&quot;, NewPart.GetPlane(&quot;XY-Plane&quot;))</p><p class="s4" style="padding-top: 9pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch.AddFigure(Fig)</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_075.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyCircle = MySketch.Figures[0]</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyCircle.Center = [4, -3]</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 109%;text-align: left;">Using this technique sketches can be created, accessed and reused across multiple parts, perhaps even with slight changes for each new part it is used in:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="101" alt="image" src="Manual_files/Image_076.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">NewSketch.AddCircle(MyCircle) MyBspline = MySketch.Figures[3] MyBspline.IsReference = True</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">NewSketch.AddBspline(MyBspline)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Note that currently ellipses and elliptical arcs are not supported due to limitations in Alibre Design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark23">CHAPTER 8: HINTS &amp; TIPS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="101" alt="image" src="Manual_files/Image_077.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Frame = Part(&quot;Frame&quot;) Beam = Part(&quot;Beam&quot;)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">BaseSketch = Frame.AddSketch(&quot;Base&quot;, Frame.GetPlane(&quot;XY-Plane&quot;))</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">ProfileSketch = Beam.AddSketch(&quot;Profile&quot;, Beam.GetPlane(&quot;XY-Plane&quot;))</p><p style="text-indent: 0pt;text-align: left;"/><ol id="l3"><li data-list-text="1."><p style="padding-left: 25pt;text-indent: -18pt;text-align: left;">It is possible to create and edit multiple parts at once. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="2."><p style="padding-top: 2pt;padding-left: 25pt;text-indent: -18pt;line-height: 108%;text-align: left;">It is not necessary to save a script before running it. This makes it easier to rapidly edit and test scripts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="452" alt="image" src="Manual_files/Image_078.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;"># create temporary sketch TempPart = Part(&quot;Temp&quot;)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">TempSketch = TempPart.AddSketch(&quot;Temp&quot;, TempPart.GetPlane(&quot;XY-Plane&quot;)) TempSketch.AddCircle(…)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">TempSketch.AddLine(…)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;"># copy to sketch on part A SketchOnPartA.CopyFrom(TempSketch)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;"># copy to sketch on part B increasing size by 25% SketchOnPartB.CopyFrom(TempSketch, 0, 0, 0, 0, 0, 0, 0, 125.0)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;"># copy one figure to sketch on part C modifying the figure first Figure = TempSketch.Figures[1]</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Figure.IsReference = True SketchoOnPartC.AddFigure(Figure)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 20pt;text-align: left;"># delete temporary sketch TempPart.Close()</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text="3."><p style="padding-left: 25pt;text-indent: -18pt;line-height: 107%;text-align: left;">A temporary sketch can be created and used as a template for sketches on other parts, then discarded. For example:</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark24">CHAPTER 9: RUNNING SCRIPTS – ADVANCED</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_079.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt;run</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">If there is only one script open then it can be run from the console by typing the run command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="74" alt="image" src="Manual_files/Image_080.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt;run “New Script (1)”</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt;run “New Script (2)”</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">If there is more than one script currently open then a specific script can be run by specifying the script name. if the name has a space in it then use quote marks around the name:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_081.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print Arguments</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Arguments can be passed to a script. Here is an example script that uses the special built-in variable ‘Arguments’ which is a list of arguments passed to the script:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="263" alt="image" src="Manual_files/Image_082.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">&gt;&gt;&gt;run []</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">&gt;&gt;&gt;run foo [&#39;foo&#39;]</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">&gt;&gt;&gt;run foo bar [&#39;foo&#39;, &#39;bar&#39;]</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">&gt;&gt;&gt;run &quot;foo bar&quot; baz [&#39;foo bar&#39;, &#39;baz&#39;]</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&gt;&gt;&gt;run &quot;New Script (1)&quot; foo bar</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">[&#39;foo&#39;, &#39;bar&#39;]</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Example usage of this script:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark25">CHAPTER 10: BUILT-IN FUNCTIONALITY</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Some useful functionality is built directly into Alibre Script and is not part of the API. This functionality is detailed in this chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark26">DETAILS OF THE CURRENT SCRIPT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_083.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print ScriptFileName</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print ScriptFolder</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The file name and the folder where the current script is stored can be obtained using the following variables. If the script has not been saved then these variables will be empty.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark27">CURRENT PART OR ASSEMBLY</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_084.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyPart = CurrentPart()</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">A script always runs inside a part workspace or an assembly workspace. The current part or assembly can be obtained by calling the following built-in functions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_085.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">MyAssy = CurrentAssembly()</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">and:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark28">CURRENTLY OPENED PARTS AND ASSEMBLIES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="101" alt="image" src="Manual_files/Image_086.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Parts = CurrentParts() print Parts[0]</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Assys = CurrentAssemblies()</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Print Assys[0]</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">It is possible to obtain a list of all currently opened parts and assemblies:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark29">THE ALIBRE SCRIPT VERSION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_087.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print AlibreScriptVersion</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">If you write a script that requires a minimum version of Alibre Script, e.g. because of a new feature that was introduced, then the current version (build number) can be read out via a built-in variable:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark30">GRAPHICAL USER INTERFACE</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_088.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Win = Windows()</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Alibre Script can create dialogs, show messages to the user, etc. All graphical functionality can be found on the ‘Windows’ class. This is accessed as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Only create one instance of the Windows class in a script.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark31">GETTING USER INPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Alibre Script can request input from the user on the command line.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_089.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">UserText = Read()</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The Read() function waits for the user to enter a line of text and then returns the text without the newline:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="Manual_files/Image_090.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">PressedKey = ReadKey()</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The ReadKey() function waits for the user to press a key and then returns the ASCII code for the pressed key:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark32">UTILITY LIBRARIES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Some utility libraries are provided as built-in classes. Currently implemented are:</p><ul id="l4"><li data-list-text=""><p style="padding-top: 9pt;padding-left: 43pt;text-indent: -18pt;text-align: left;">TwoD – provides functions for two-dimensional calculations</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="Manual_files/Image_091.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">My2D = TwoD()</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">My3D = ThreeD()</p><p style="text-indent: 0pt;text-align: left;"/></li><li data-list-text=""><p style="padding-top: 1pt;padding-bottom: 1pt;padding-left: 7pt;text-indent: 18pt;line-height: 164%;text-align: left;">ThreeD – provides functions for three-dimensional calculations Examples:</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">See the reference manual for details of functions provided by these libraries.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark33">CHAPTER 11: 2D SKETCH MAPPING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark34">FACE MAPPING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">When creating a 2D sketch on a face using a script there are complications if the part was not created by the same script, for example created manually.</p><p style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: justify;">Consider the following 2D sketch view for a face. Because this part was created directly in an Assembly session it does not have any sides that are aligned with the X or Y axis. This makes creating sketches on the face complicated.</p><p style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Sketch face mapping simplifies the problem for the script writing. To create a “mapping” two points on a face edge are required, highlighted in red in this example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 127pt;text-indent: 0pt;text-align: left;"><span><img width="305" height="235" alt="image" src="Manual_files/Image_092.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: justify;">When mapping has been turned on the sketch coordinate system looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="294" height="225" alt="image" src="Manual_files/Image_093.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The chosen edge is on the X axis and the points on the edge are at the origin and somewhere along the positive X axis. The face is “sitting” on the X axis.</p><p style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Now sketch figures can be drawn, such as this rectangle, in relation to the aligned edge. Drawing above the X axis ensures the sketch figures are on the face and drawing below the X axis ensures the sketch figures are alongside the face.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 130pt;text-indent: 0pt;text-align: left;"><span><img width="294" height="225" alt="image" src="Manual_files/Image_094.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">When mapping is then turned off the final sketch looks as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><span><img width="305" height="235" alt="image" src="Manual_files/Image_095.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The relationship between the sketch figures and the aligned edge are maintained. Calculating the angles for this rectangle would be complicated to do without mapping the face to the X axis.</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Here is another example, in this case a different edge has been chosen:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 127pt;text-indent: 0pt;text-align: left;"><span><img width="301" height="234" alt="image" src="Manual_files/Image_096.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">And this is the resultant mapping:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 136pt;text-indent: 0pt;text-align: left;"><span><img width="277" height="225" alt="image" src="Manual_files/Image_097.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="156" alt="image" src="Manual_files/Image_098.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">VertexA = MyPart.GetVertex(&quot;Vertex&lt;4&gt;&quot;) VertexB = MyPart.GetVertex(&quot;Vertex&lt;7&gt;&quot;)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">MySketch = MyPart.AddSketch(&quot;MySketch&quot;, MyPart.GetFace(&quot;Face&lt;2&gt;&quot;)) MySketch.StartFaceMapping(VertexA, VertexB) MySketch.AddRectangle(10, 0, 20, 5, False)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">MySketch.StopFaceMapping()</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Any edge and any points on the edge can be chosen for the mapping. Here is what it looks like in a script.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark35">GENERIC MAPPING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">It is also possible in Alibre Design to create 2D sketches on planes instead of faces, however mapping of the coordinate system can still be useful to avoid the need for additional calculations in scripts.</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">With face mapping the transformation of the coordinate system is determined automatically based on the face, positioning it at (0, 0) and “sitting” on the X axis. For a plane this isn’t possible so some additional information has to be given.</p><p style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Here is a diagram for a sketch on a plane. Two arbitrary points are chosen along with a third point that indicates to Alibre Script how the mapping should be performed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="385" height="334" alt="image" src="Manual_files/Image_099.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">When mapping is enabled the coordinate system looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><span><img width="401" height="322" alt="image" src="Manual_files/Image_100.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Point 1 is placed at the origin and rotation is such that the third point is always above the X axis. Now the sketch can be easily drawn:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><span><img width="401" height="322" alt="image" src="Manual_files/Image_101.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">When mapping is stopped the end result is as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="385" height="334" alt="image" src="Manual_files/Image_102.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="183" alt="image" src="Manual_files/Image_103.png"/></span></p><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Point1 = [5.0, 4.2, -6.3]</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Point2 = [0.55, 0.0, 12.1]</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">PointAboveAxis = [7.2, 6.01, -3.2]</p><p class="s4" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">MySketch = MyPart.AddSketch(&quot;MySketch&quot;, MyPart.GetFace(&quot;Face&lt;2&gt;&quot;)) MySketch.StartMapping(Point1, Point2, PointAboveAxis) MySketch.AddRectangle(10, 0, 20, 5, False)</p><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">MySketch.StopMapping()</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Here is what this looks like in a script:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark36">CHAPTER 12: EDITOR</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">The editor has some features that make creating scripts easier.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark37">UNDO AND REDO</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Press Ctrl+Z to undo the most recent change. Press Ctrl+Z to undo the change before that. Press Ctrl-Y to redo a change that has been undone.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark38">SELECT, COPY AND PASTE</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Press Ctrl+A to select all of the text (or click and drag the cursor). Press Ctrl+C to copy the selected text to the Windows clipboard and press Ctrl+V to paste text from the Windows clipboard. Press Delete to delete the selected text.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark39">FIND AND REPLACE</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Press Ctrl+F (find) or Ctrl+H (replace) to open the find and replace dialog.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span><img width="393" height="258" alt="image" src="Manual_files/Image_104.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Enter text to find into the Find box and click on Find Next to search from the current cursor location.</p><p style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Click on the Replace tab to perform a find and replace. Press F3 to jump to the next match or Shift+F3 to jump to the previous match.</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Regular expressions allow for complex find and replace operations. Details of the supported syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li data-list-text="[1]"><p class="s4" style="padding-left: 103pt;text-indent: -96pt;line-height: 108%;text-align: left;">char  matches itself, unless it is a special character (metachar): . \ [ ] * + ? ^ $ and ( ) if posix option.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[2]"><p class="s4" style="padding-left: 55pt;text-indent: -48pt;text-align: left;">.   matches any character.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[3]"><p class="s4" style="padding-left: 55pt;text-indent: -48pt;text-align: left;">\   matches the character following it, except:</p><ul id="l6"><li data-list-text="-"><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: left;">\a, \b, \f, \n, \r, \t, \v match the corresponding C escape char, respectively BEL, BS, FF, LF, CR, TAB and VT; Note that \r and \n are never matched because Scintilla regex searches are made line per line</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">(stripped of end-of-line chars).</p></li><li data-list-text="-"><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: left;">if not in posix mode, when followed by a left or right round bracket (see [8]);</p></li><li data-list-text="-"><p class="s4" style="padding-left: 115pt;text-indent: -12pt;text-align: left;">when followed by a digit 1 to 9 (see [9]);</p></li><li data-list-text="-"><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: left;">when followed by a left or right angle bracket (see [10]);</p></li><li data-list-text="-"><p class="s4" style="padding-left: 115pt;text-indent: -12pt;text-align: left;">when followed by d, D, s, S, w or W (see [11]);</p></li><li data-list-text="-"><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: left;">when followed by x and two hexa digits (see [12]. Backslash is used as an escape character for all other meta-characters, and itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li data-list-text="[4]"><p class="s4" style="padding-left: 103pt;text-indent: -96pt;line-height: 108%;text-align: left;">[set]  matches one of the characters in the set. If the first character in the set is &quot;^&quot;,</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: left;">it matches the characters NOT in the set, i.e. complements the set. A shorthand S-E (start dash end) is used to specify a set of characters S up to</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">E, inclusive. S and E must be characters, otherwise</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: left;">the dash is taken literally (eg. in expression [\d-a]). The special characters &quot;]&quot; and &quot;-&quot; have no special meaning if they appear as the first chars in the set.</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: left;">To include both, put - first: [-]A-Z] (or just backslash them).</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">examples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 151pt;text-indent: 0pt;text-align: left;">match:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 151pt;text-indent: 0pt;text-align: left;">[-]|]  matches these 3 chars,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 151pt;text-indent: 0pt;line-height: 216%;text-align: left;">[]-|]  matches from ] to | chars [a-z]  any lowercase alpha</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 151pt;text-indent: 0pt;text-align: left;">[^-]]  any char except - and ]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 151pt;text-indent: 0pt;line-height: 216%;text-align: left;">[^A-Z]  any char except uppercase alpha [a-zA-Z] any alpha</p></li><li data-list-text="[5]"><p class="s4" style="padding-left: 55pt;text-indent: -48pt;text-align: left;">*   any regular expression form [1] to [4]</p></li></ol><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 107%;text-align: left;">(except [8], [9] and [10] forms of [3]), followed by closure char (*)</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">matches zero or more matches of that form.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">[6]   +   same as [5], except it matches one or more.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">[5-6]     Both [5] and [6] are greedy (they match as much as possible).</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">Unless they are followed by the &#39;lazy&#39; quantifier (?)</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">In which case both [5] and [6] try to match as little as</p><p class="s4" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">possible</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l7"><li data-list-text="[7]"><p class="s4" style="padding-left: 55pt;text-indent: -48pt;text-align: left;">?   same as [5] except it matches zero or one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[8]"><p class="s4" style="padding-left: 103pt;text-indent: -96pt;line-height: 108%;text-align: left;">a regular expression in the form [1] to [13], enclosed as \(form\) (or (form) with posix flag) matches what form matches. The enclosure creates a set of tags, used for [9] and for pattern substitution.</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 11pt;text-align: left;">The tagged forms are numbered starting from 1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[9]"><p class="s4" style="padding-left: 103pt;text-indent: -96pt;line-height: 108%;text-align: left;">a \ followed by a digit 1 to 9 matches whatever a previously tagged regular expression ([8]) matched.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[10]"><p class="s4" style="padding-left: 55pt;text-indent: -48pt;text-align: left;">\&lt;   a regular expression starting with a \&lt; construct</p><p class="s4" style="padding-left: 103pt;text-indent: -48pt;line-height: 108%;text-align: left;">\&gt;   and/or ending with a \&gt; construct, restricts the pattern matching to the beginning of a word, and/or the end of a word. A word is defined to be a character string beginning and/or ending with the characters</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: left;">A-Z a-z 0-9 and _. Scintilla extends this definition by user setting. The word must also be preceded and/or followed by any character outside those mentioned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[11]"><p class="s4" style="padding-left: 103pt;text-indent: -96pt;line-height: 108%;text-align: left;">\l   a backslash followed by d, D, s, S, w or W, becomes a character class (both inside and outside sets []).</p><p class="s4" style="padding-left: 115pt;text-indent: 0pt;line-height: 11pt;text-align: left;">d: decimal digits</p><p class="s4" style="padding-left: 115pt;text-indent: 0pt;text-align: left;">D: any char except decimal digits</p><p class="s4" style="padding-left: 115pt;text-indent: 0pt;text-align: left;">s: whitespace (space, \t \n \r \f \v)</p><p class="s4" style="padding-left: 115pt;text-indent: 0pt;text-align: left;">S: any char except whitespace (see above)</p><p class="s4" style="padding-left: 115pt;text-indent: 0pt;line-height: 108%;text-align: left;">w: alphanumeric &amp; underscore (changed by user setting) W: any char except alphanumeric &amp; underscore (see above)</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[12]"><p class="s4" style="padding-left: 55pt;text-indent: -48pt;text-align: left;">\xHH  a backslash followed by x and two hexa digits,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 4pt;padding-left: 103pt;text-indent: 0pt;line-height: 108%;text-align: justify;">becomes the character whose Ascii code is equal to these digits. If not followed by two digits, it is &#39;x&#39; char itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[13]"><p class="s4" style="padding-left: 103pt;text-indent: -96pt;line-height: 108%;text-align: justify;">a composite regular expression xy where x and y are in the form [1] to [12] matches the longest match of x followed by a match for y.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="[14]"><p class="s4" style="padding-left: 55pt;text-indent: -48pt;text-align: left;">^   a regular expression starting with a ^ character</p></li></ol><p class="s4" style="padding-left: 103pt;text-indent: -48pt;line-height: 108%;text-align: left;">$    and/or ending with a $ character, restricts the pattern matching to the beginning of the line, or the end of line. [anchors] Elsewhere in the</p><p class="s4" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">pattern, ^ and $ are treated as ordinary characters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark40">QUICK FIND</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Press Ctrl+I to open the quick find panel at the top right of the editor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><span><img width="305" height="64" alt="image" src="Manual_files/Image_105.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 167%;text-align: left;">Enter text to find and click on the up and down arrows to search backwards and forwards. Click anywhere in the editor to close the quick find panel.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark41">GO TO</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Press Ctrl+G to open the GoTo dialog window:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 156pt;text-indent: 0pt;text-align: left;"><span><img width="226" height="151" alt="image" src="Manual_files/Image_106.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Enter the line number to jump to in the editor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark42">RUN THE SCRIPT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Press Ctrl+R to run the current script.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark43">SAVE</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Press Ctrl+S to save the current script.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark44">CODE FOLDING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Code folding is a way of hiding pieces of code to reduce clutter, for example the contents of a large function that you are not currently working on.</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">When writing a function the code folding feature will automatically appear on the left.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 175pt;text-indent: 0pt;text-align: left;"><span><img width="162" height="83" alt="image" src="Manual_files/Image_107.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Clicking on the box with the ‘-‘ will collapse the entire function, hiding it away:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 175pt;text-indent: 0pt;text-align: left;"><span><img width="161" height="65" alt="image" src="Manual_files/Image_108.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Clicking on the box with the ‘+’ will expand the function again. This feature is not limited to functions, for example a multi-line list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 197pt;text-indent: 0pt;text-align: left;"><span><img width="93" height="96" alt="image" src="Manual_files/Image_109.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Collapsed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 205pt;text-indent: 0pt;text-align: left;"><span><img width="77" height="50" alt="image" src="Manual_files/Image_110.jpg"/></span></p></body></html>
