<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AdvancedAPI</title><meta name="author" content="Max"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 .s1 { color: #404040; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 36pt; }
 .s2 { color: #585858; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 .s3 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 18pt; }
 p { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; margin:0pt; }
 .a, a { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s4 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 .s5 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s6 { color: #FFF; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s7 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s8 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s9 { color: black; font-family:"DejaVu Sans Mono", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 li {display: block; }
 #l2 {padding-left: 0pt; }
 #l2> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 7pt;text-indent: 0pt;line-height: 42pt;text-align: left;">ALIBRE SCRIPT ADVANCED API</p><p class="s2" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Manual Version 1.0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 192pt;text-indent: 0pt;text-align: left;"><span><img width="128" height="44" alt="image" src="AdvancedAPI_files/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark0">DISCLAIMER</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Information in this document is subject to change without notice and does not represent a commitment on the part of the manufacturer. The software described in this document is furnished under license agreement or nondisclosure agreement and may be used or copied in accordance with the terms of the agreement. It is against the law to copy the software on any medium except as specifically allowed in the license or nondisclosure agreement. No part of this manual may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or information storage and retrieval systems, for any purpose other than the software purchaser’s use, without prior written permission.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">© Alibre, LLC 2020, All Rights Reserved</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 167%;text-align: left;">Microsoft® and Windows™ are trademarks or registered trademarks of Microsoft Corporation. PC® is a registered trademark of International Business Machines Corporation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 8pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">CONTENTS</p><p style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark0" class="a">Disclaimer                                                     </a><a href="#bookmark0">2</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="a">Chapter 1: Introduction                                             </a><a href="#bookmark1">4</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark2" class="a">A Warning                                                   </a><a href="#bookmark2">4</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="a">Chapter 2: Getting Started                                            </a><a href="#bookmark3">5</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="a">Chapter 3: Accessing the Alibre Design API                                   </a><a href="#bookmark4">8</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="a">Overview                                                    </a><a href="#bookmark5">8</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="a">The Current Part or Assembly                                         </a><a href="#bookmark6">9</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="a">Chapter 5: C# Classes                                              </a><a href="#bookmark7">10</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="a">Chapter 6: User Interfaces                                           </a><a href="#bookmark8">11</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="a">Chapter 7: Units                                                 </a><a href="#bookmark9">12</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="a">Angles                                                     </a><a href="#bookmark10">12</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="a">Distances                                                   </a><a href="#bookmark11">12</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="a">Chapter 8: Output                                                </a><a href="#bookmark12">14</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="a">Appendix A: Predefined Global Variables                                   </a><a href="#bookmark13">15</a></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a href="#bookmark14" class="a">Appendix B: Hints and Tips                                           </a><a href="#bookmark14">16</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark15" class="a">Wrapping C# Code                                              </a><a href="#bookmark15">16</a></p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;"><a href="#bookmark16" class="a">Networking Support                                             </a><a href="#bookmark16">16</a></p><p class="s3" style="padding-top: 10pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark1">CHAPTER 1: INTRODUCTION</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Alibre Script provides a simplified set of functions and properties (together called an API) allowing quick and easy use of the underlying Alibre Design API using the Python language. In order to make it as easy to use as possible some sacrifices had to be made resulting in less flexibility than the Alibre Design API provides.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The Alibre Script Advanced API addresses this by providing advanced users with a way to access the full Alibre Design API from inside Alibre Script.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Familiarity with the Alibre Design API and how it is used is required. See the included AlibreAPIHelp.chm file for full details. Also familiarity with the C# programming language is also required. Neither of these topics are covered in this manual. Familiarity with Windows Forms (WinForms) is required for constructing user interfaces.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark2">A WARNING</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">With great power comes great responsibility. Alibre Script contains error and sanity checking to try to stop users from doing things that could create problems. The Advanced API described in this manual has none of that and without careful use it could be possible to destabilize or crash Alibre Design, potentially causing data loss. Always thoroughly test code before sharing it with others.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark3">CHAPTER 2: GETTING STARTED</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">This chapter will show some simple examples of how to use the Advanced API, including passing variables to and from the environment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The premise is simple, by using a special class available in a script C# code can be compiled and executed. This C# code has full access to the Alibre Design API.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Here is a simple example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="AdvancedAPI_files/Image_002.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs = CSharp()</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs.CompileAndRun(&#39;int Foo = 1;&#39;)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">An instance of the CSharp class is created then a piece of C# code is compiled and run. The C# code creates an integer called Foo and sets it to the value one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">This is not particularly useful because it doesn’t do anything. Once the CompileAndRun function is finished the variable Foo is lost, along with the entire C# environment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">In order to get variables out of C# and into the script we simply need to look at what CompileAndRun returns. Adding:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="AdvancedAPI_files/Image_003.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print Cs.CompileAndRun(‘int Foo = 1;’)</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="AdvancedAPI_files/Image_004.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">{&#39;Foo&#39;: 1}</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">gives the following output in the console:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">This is a Python dictionary. A dictionary is a list of values of different types, each one having a name. Now we can access Foo in the script:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="AdvancedAPI_files/Image_005.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">OutVariables = Cs.CompileAndRun(&#39;int Foo = 1;&#39;)</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print OutVariables[&#39;Foo&#39;]</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">The important aspect to remember is that variables created in C# are automatically added to the dictionary that is returned to the script.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Passing variables in works in exactly the same way, by using a dictionary:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="91" alt="image" src="AdvancedAPI_files/Image_006.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">InVariables = {&#39;Bar&#39;: 41}</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 108%;text-align: left;">OutVariables = Cs.CompileAndRun(&#39;Variables[&quot;Bar&quot;] = (int)Variables[&quot;Bar&quot;] + 1;&#39;, InVariables)</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">print OutVariables</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">We created a dictionary with a value called Bar in the script. In the C# code we take that input value and increment it. When we look at what is returned we see:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="AdvancedAPI_files/Image_007.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">{&#39;Bar&#39;: 42}</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">There are a few important things to note.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li data-list-text=""><p style="padding-left: 43pt;text-indent: -18pt;text-align: left;">Variables passed in are accessed by using the ‘Variables’ C# dictionary</p></li><li data-list-text=""><p style="padding-top: 1pt;padding-left: 43pt;text-indent: -18pt;line-height: 108%;text-align: left;">Variables in Python do not have an explicit type (e.g. int) however they do in C# therefore variables passed in must always be cast to the correct C# type.</p></li><li data-list-text=""><p style="padding-left: 43pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Variables passed in are also passed out, even if they are not used in the C# code</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">C# code is compiled before it is run, and compilation takes time, however once complete execution is efficient. In the examples so far the C# code is compiled and run in a single step, however in some</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">situations this may not be ideal, for example if the same piece of C# code is run more than once. Fortunately compilation can be separated from running as this example shows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="101" alt="image" src="AdvancedAPI_files/Image_008.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">InVariables = {&#39;Bar&#39;: 41 }</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">MyCSharpCode = Cs.Compile(&#39;Variables[&quot;Bar&quot;] = (int)Variables[&quot;Bar&quot;] + 1;&#39;) print Cs.Run(MyCSharpCode, InVariables)</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">print Cs.Run(MyCSharpCode, InVariables)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Note that a different dictionary of variables can be passed every time the compiled C# code is run.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark4">CHAPTER 3: ACCESSING THE ALIBRE DESIGN API</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark5">OVERVIEW</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">Here is an example that returns a list of all the current parts and assemblies that are open along with the number of design axes in each one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="210" alt="image" src="AdvancedAPI_files/Image_009.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs = CSharp()</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">OutVariables = Cs.CompileAndRun(&#39;&#39;&#39; using AlibreX;</p><p class="s5" style="padding-left: 13pt;text-indent: -12pt;line-height: 179%;text-align: left;">foreach (IADDesignSession Sess in AlibreRoot.Sessions) { Variables[Sess.Name] = Sess.DesignAxes.Count;</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">} &#39;&#39;&#39;)</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">print OutVariables</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Note the use of triple quotes. This allows multi-line strings to be created in a script, making formatting of C# code more familiar.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">First we have the using statement for the AlibreX assembly. This is required for any code that uses the Alibre Design API (AD API).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Next we get a list of all design sessions currently opened by using the AlibreRoot object. This is a global variable that is always available in C# code to access the IADRoot instance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="AdvancedAPI_files/Image_010.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">{&#39;DN125 Flange PN16&#39;: 3, &#39;CSharpTest&#39;: 3}</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 7pt;text-indent: 0pt;line-height: 107%;text-align: left;">We then add to the Variables dictionary the number of design axes, using the part/assembly name as the dictionary key. This is an example of what is returned from running this script:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark6">THE CURRENT PART OR ASSEMBLY</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">When a script executes it is always inside a part or assembly. At the AD API level this is an IADSession object. Here is an example of how to get the name of the part or assembly that the script is executing in:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="155" alt="image" src="AdvancedAPI_files/Image_011.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs = CSharp()</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">Variables = Cs.CompileAndRun(&#39;&#39;&#39; using AlibreX;</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">string CurrentSessionName = CurrentSession.Name; &#39;&#39;&#39;)</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">print Variables</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">and here is an example of the output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="AdvancedAPI_files/Image_012.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">{&#39;CurrentSessionName&#39;: &#39;CSharpTest&#39;}</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The CurrentSession variable is always available and is the IADSession instance that the script is executing inside of.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark7">CHAPTER 5: C# CLASSES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">It is possible to create and use classes in C#. Here is an example that creates a class which wraps IADSession:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="506" alt="image" src="AdvancedAPI_files/Image_013.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs = CSharp()</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">Variables = Cs.CompileAndRun(&#39;&#39;&#39; using AlibreX;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">class MySession {</p><p class="s5" style="padding-top: 8pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">public IADSession Session;</p><p class="s5" style="padding-top: 8pt;padding-left: 25pt;text-indent: -12pt;line-height: 179%;text-align: left;">public MySession(IADSession Session) { this.Session = Session;</p><p class="s5" style="padding-left: 13pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s5" style="padding-top: 8pt;padding-left: 25pt;text-indent: -12pt;line-height: 178%;text-align: left;">public override string ToString() { return Session.Name;</p><p class="s5" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">}</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">MySession Se = new MySession(CurrentSession);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">Variables[&quot;Name&quot;] = Se.ToString(); &#39;&#39;&#39;)</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">print Variables[&#39;Name&#39;]</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="AdvancedAPI_files/Image_014.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">CSharpTest</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">and here is an example output on the console:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark8">CHAPTER 6: USER INTERFACES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Full access to WinForms is provided allowing more complex user interfaces to be constructed than is available in Alibre Script. Here is a simple example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="145" alt="image" src="AdvancedAPI_files/Image_015.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Cs = CSharp() Cs.CompileAndRun(&#39;&#39;&#39;</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">using System.Windows.Forms;</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 108%;text-align: left;">MessageBox.Show(&quot;Hello from C#!&quot;, &quot;My Script&quot;, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">&#39;&#39;&#39;)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">And the output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 167pt;text-indent: 0pt;text-align: left;"><span><img width="196" height="171" alt="image" src="AdvancedAPI_files/Image_016.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The global variable ParentForm is available and is the Windows Form that you should use as the parent when creating new forms of your own. It can also be used to determine the correct user interface thread to use (e.g. ParentForm.InvokeRequired).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark9">CHAPTER 7: UNITS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">The Alibre Design API uses centimeters for distances and radians for angles, however scripts can use inches, centimeters or millimeters, along with degrees. Therefore when passing distances and angles to C# code a conversion from script units to Alibre Design API units must be made. Likewise when returning distances and angles from C# code a conversion from Alibre Design API units to script units must be made.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark10">ANGLES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Scripts always use degrees and the Alibre Design API always uses radians, therefore the conversion is always the same. Here is an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="128" alt="image" src="AdvancedAPI_files/Image_017.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs = CSharp()</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">print Cs.CompileAndRun(&#39;&#39;&#39; using System;</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">double Radians = Math.PI * (double)Variables[&quot;Angle&quot;] / 180.0;</p><p class="s5" style="padding-top: 9pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">&#39;&#39;&#39;, {&#39;Angle&#39;: 180.0 })</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="AdvancedAPI_files/Image_018.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">{&#39;Angle&#39;: 180.0, &#39;Radians&#39;: 3.1415926535897931}</p><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark11">DISTANCES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Distances are a bit more complicated because when writing C# code it is not known in advance what units the script will use. To solve this two helper functions are provided:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l2"><li data-list-text=""><p style="padding-left: 43pt;text-indent: -18pt;text-align: left;">Units.ToADUnits(value) – converts from script units to centimeters</p></li><li data-list-text=""><p style="padding-top: 1pt;padding-left: 43pt;text-indent: -18pt;text-align: left;">Units.FromADUnits(value) – converts from centimeters to script units</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Here is a usage example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="128" alt="image" src="AdvancedAPI_files/Image_019.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs = CSharp()</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">print Cs.CompileAndRun(&#39;&#39;&#39; using AlibreScript.API;</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">double AD_Dist = Units.ToADUnits((double)Variables[&quot;Distance&quot;]);</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">&#39;&#39;&#39;, {&#39;Distance&#39;: 12.3 })</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="20" alt="image" src="AdvancedAPI_files/Image_020.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">{&#39;Distance&#39;: 12.300000000000001, &#39;AD_Dist&#39;: 1.2300000000000002}</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark12">CHAPTER 8: OUTPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">C# code can output to the console using a built in Utilities class. Examples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="182" alt="image" src="AdvancedAPI_files/Image_021.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Cs = CSharp() Cs.CompileAndRun(&#39;&#39;&#39;</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;line-height: 179%;text-align: left;">Utilities.OutputLine(&quot;Hello {0}&quot;, 45); Utilities.OutputLine(&quot;Foo&quot;); Utilities.Output(&quot;A&quot;); Utilities.Output(&quot; {0:0.00}&quot;, 66.4);</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&#39;&#39;&#39;)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">OutputLine adds a newline to the end of the text, whereas Output does not. Standard string.Format style formatting can be used directly.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="74" alt="image" src="AdvancedAPI_files/Image_022.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">Hello 45 Foo</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">A 66.40</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Console output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark13">APPENDIX A: PREDEFINED GLOBAL VARIABLES</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">The following global variables are always defined an available in C# code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:7.274pt" cellspacing="0"><tr style="height:15pt"><td style="width:85pt;border-left-style:solid;border-left-width:1pt;border-left-color:#4F81BC" bgcolor="#4F81BC"><p class="s6" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Name</p></td><td style="width:383pt;border-right-style:solid;border-right-width:1pt;border-right-color:#4F81BC" bgcolor="#4F81BC"><p class="s6" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Description</p></td></tr><tr style="height:27pt"><td style="width:85pt;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6" bgcolor="#DBE4F0"><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Variables</p></td><td style="width:383pt;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6" bgcolor="#DBE4F0"><p class="s8" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">A C# dictionary representing the python dictionary passed to CompileAndRun or</p><p class="s8" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Run</p></td></tr><tr style="height:14pt"><td style="width:85pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6"><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">AlibreRoot</p></td><td style="width:383pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6"><p class="s8" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The Alibre IADRoot object</p></td></tr><tr style="height:14pt"><td style="width:85pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6" bgcolor="#DBE4F0"><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CurrentSession</p></td><td style="width:383pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6" bgcolor="#DBE4F0"><p class="s8" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The IADSession for the part or assembly that the script is executing in</p></td></tr><tr style="height:14pt"><td style="width:85pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6"><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">CurrentScript</p></td><td style="width:383pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6"><p class="s8" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The path and file name of the currently executing script, if it has been saved to disk</p></td></tr><tr style="height:14pt"><td style="width:85pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6" bgcolor="#DBE4F0"><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">ParentForm</p></td><td style="width:383pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6" bgcolor="#DBE4F0"><p class="s8" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">A Form instance to use as a parent and UI thread when creating user interfaces</p></td></tr><tr style="height:14pt"><td style="width:85pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6"><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Utilities</p></td><td style="width:383pt;border-top-style:solid;border-top-width:1pt;border-top-color:#94B3D6;border-left-style:solid;border-left-width:1pt;border-left-color:#94B3D6;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#94B3D6;border-right-style:solid;border-right-width:1pt;border-right-color:#94B3D6"><p class="s8" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Static class defining utility functions</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark14">APPENDIX B: HINTS AND TIPS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark15">WRAPPING C# CODE</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 108%;text-align: left;">Small snippets of C# code can be written to perform specific tasks. This can then be placed inside a Python function, essentially wrapping it and hiding the fact that C# is used from the caller. Here is an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="317" alt="image" src="AdvancedAPI_files/Image_023.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs = CSharp()</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;"># increments a value using C# instead of python def Increment(Value):</p><p class="s5" style="padding-left: 13pt;text-indent: 0pt;line-height: 178%;text-align: left;">VarIn = {&#39;Value&#39;: Value } VarOut = Cs.CompileAndRun(&#39;&#39;&#39;</p><p class="s5" style="padding-left: 25pt;text-indent: 0pt;line-height: 178%;text-align: left;">Variables[&quot;Value&quot;] = (int)Variables[&quot;Value&quot;] + 1; &#39;&#39;&#39;, VarIn)</p><p class="s5" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">return VarOut[&#39;Value&#39;]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;line-height: 20pt;text-align: left;">print Increment(16) print Increment(41)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Here is the output to the console:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="47" alt="image" src="AdvancedAPI_files/Image_024.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">17</p><p class="s5" style="padding-top: 9pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">42</p><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark16">NETWORKING SUPPORT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Here is a simple example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="128" alt="image" src="AdvancedAPI_files/Image_025.png"/></span></p><p class="s5" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Cs = CSharp()</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;line-height: 178%;text-align: left;">print Cs.CompileAndRun(&#39;&#39;&#39; using System.Net;</p><p class="s5" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">string HostName = Dns.GetHostName();</p><p class="s5" style="padding-top: 8pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">&#39;&#39;&#39;)</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="18" alt="image" src="AdvancedAPI_files/Image_026.png"/></span></p><p class="s9" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">{&#39;HostName&#39;: &#39;Cochise&#39;}</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">The example output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></body></html>
